#!/usr/bin/env python3

import sys
import os
import re

"""
"""

DEBUG = True


def Debug(line):
    if DEBUG:
        print(f"DEBUG: {line}")


def parse(filename):
    STATE_PARSER_START = "-"
    STATE_HEADER_COLLECT = "H"

    STATE_EXAMPLE_START = "S"
    STATE_EXAMPLE_END = "E"
    STATE_EXAMPLE_COLLECT = "C"
    STATE_COMMENT = "#"

    WRITING = False

    OUTPUT = "NONE"
    HEADER = ""

    state = STATE_HEADER_COLLECT
    indent1 = 0

    Debug(f"Open file {filename}")

    with open(filename, 'r') as inp:
        for line in inp:
            line = line.rstrip('\n')

            Debug(f"# {state}: {line}")


            # End of Example, save current file
            if state == STATE_EXAMPLE_END:
                indent1 = 0

                if WRITING:
                    Debug(f"Close previous file")
                    out.close()
                    WRITING = False

            if (re.match(r'^\s*class\s+', line)):
                if state == STATE_EXAMPLE_COLLECT:
                    if WRITING:
                        Debug(f"Close previous file")
                        out.close()
                        WRITING = False

                state = STATE_EXAMPLE_COLLECT
                OUTPUT = re.sub(r'^\s*class\s+([^(]+).*', r'\1', line)
                
                WRITING = True

                if os.path.exists(f"{OUTPUT}.py"):
                    postfix = 0
                    while os.path.exists(f"{OUTPUT}_{postfix:02}.py"):
                        postfix += 1

                    OUTPUT = f"{OUTPUT}_{postfix:02}.py"
                else:
                    OUTPUT = f"{OUTPUT}.py"

                out = open(OUTPUT, 'w')
                out.write(HEADER)

                #print(f"- new output: {OUTPUT}")
                #print(".", end="")

            if state == STATE_HEADER_COLLECT:
                HEADER += line + '\n'

            if WRITING:
                out.write(line + '\n')
                pass

            Debug(f"  {state}: {line}")

    if WRITING:
        out.close()
        # print("#")


"""
"""


def walk(rootdir='.', pattern='*'):
    for root, dirs, files in os.walk(rootdir):
        for folder in dirs:
            if folder in ["changelog", "_templates", "i18n", "LC_MESSAGES"]:
                continue

            d_name = root + "/" + folder

            walk(d_name, pattern)

        for file in files:
            f_name = root + '/' + file

            if re.match(pattern, file):
                parse(f_name)


"""
"""


def main(rootdir, pattern):
    print(f"Main: looking for '{pattern}' in {rootdir}")

    if pattern == '*':
        walk(rootdir, r'.*')
    else:
        walk(rootdir, r'.*' + pattern + '$')


if __name__ == "__main__":
    rootdir = '.+'
    pattern = '*'

    if len(sys.argv) > 1:
        rootdir = sys.argv[1]

    if len(sys.argv) > 2:
        pattern = sys.argv[2]

    if os.path.isdir(rootdir):
        main(rootdir, pattern)
    else:
        parse(rootdir)
        
    print("")
